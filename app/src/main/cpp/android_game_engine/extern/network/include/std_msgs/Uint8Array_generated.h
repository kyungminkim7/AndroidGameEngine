// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UINT8ARRAY_STD_MSGS_H_
#define FLATBUFFERS_GENERATED_UINT8ARRAY_STD_MSGS_H_

#include "flatbuffers/flatbuffers.h"

namespace std_msgs {

struct Uint8Array;
struct Uint8ArrayBuilder;

struct Uint8Array FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Uint8ArrayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct Uint8ArrayBuilder {
  typedef Uint8Array Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Uint8Array::VT_DATA, data);
  }
  explicit Uint8ArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Uint8Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint8Array>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint8Array> CreateUint8Array(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  Uint8ArrayBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Uint8Array> CreateUint8ArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return std_msgs::CreateUint8Array(
      _fbb,
      data__);
}

inline const std_msgs::Uint8Array *GetUint8Array(const void *buf) {
  return flatbuffers::GetRoot<std_msgs::Uint8Array>(buf);
}

inline const std_msgs::Uint8Array *GetSizePrefixedUint8Array(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<std_msgs::Uint8Array>(buf);
}

inline bool VerifyUint8ArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<std_msgs::Uint8Array>(nullptr);
}

inline bool VerifySizePrefixedUint8ArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<std_msgs::Uint8Array>(nullptr);
}

inline void FinishUint8ArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<std_msgs::Uint8Array> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUint8ArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<std_msgs::Uint8Array> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace std_msgs

#endif  // FLATBUFFERS_GENERATED_UINT8ARRAY_STD_MSGS_H_
