// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TWIST_MSGS_H_
#define FLATBUFFERS_GENERATED_TWIST_MSGS_H_

#include "flatbuffers/flatbuffers.h"

#include "Vector3_generated.h"

namespace msgs {

struct Twist;
struct TwistBuilder;

struct Twist FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TwistBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LINEAR = 4,
    VT_ANGULAR = 6
  };
  const msgs::Vector3 *linear() const {
    return GetPointer<const msgs::Vector3 *>(VT_LINEAR);
  }
  const msgs::Vector3 *angular() const {
    return GetPointer<const msgs::Vector3 *>(VT_ANGULAR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LINEAR) &&
           verifier.VerifyTable(linear()) &&
           VerifyOffset(verifier, VT_ANGULAR) &&
           verifier.VerifyTable(angular()) &&
           verifier.EndTable();
  }
};

struct TwistBuilder {
  typedef Twist Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_linear(flatbuffers::Offset<msgs::Vector3> linear) {
    fbb_.AddOffset(Twist::VT_LINEAR, linear);
  }
  void add_angular(flatbuffers::Offset<msgs::Vector3> angular) {
    fbb_.AddOffset(Twist::VT_ANGULAR, angular);
  }
  explicit TwistBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Twist> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Twist>(end);
    return o;
  }
};

inline flatbuffers::Offset<Twist> CreateTwist(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<msgs::Vector3> linear = 0,
    flatbuffers::Offset<msgs::Vector3> angular = 0) {
  TwistBuilder builder_(_fbb);
  builder_.add_angular(angular);
  builder_.add_linear(linear);
  return builder_.Finish();
}

inline const msgs::Twist *GetTwist(const void *buf) {
  return flatbuffers::GetRoot<msgs::Twist>(buf);
}

inline const msgs::Twist *GetSizePrefixedTwist(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<msgs::Twist>(buf);
}

inline bool VerifyTwistBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<msgs::Twist>(nullptr);
}

inline bool VerifySizePrefixedTwistBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<msgs::Twist>(nullptr);
}

inline void FinishTwistBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<msgs::Twist> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTwistBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<msgs::Twist> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msgs

#endif  // FLATBUFFERS_GENERATED_TWIST_MSGS_H_
