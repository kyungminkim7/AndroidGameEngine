// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMPRESSED_STD_MSGS_H_
#define FLATBUFFERS_GENERATED_COMPRESSED_STD_MSGS_H_

#include "flatbuffers/flatbuffers.h"

namespace std_msgs {

struct Compressed;
struct CompressedBuilder;

struct Compressed FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CompressedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNCOMPRESSEDDATASIZE = 4,
    VT_COMPRESSEDDATA = 6
  };
  uint32_t uncompressedDataSize() const {
    return GetField<uint32_t>(VT_UNCOMPRESSEDDATASIZE, 0);
  }
  bool mutate_uncompressedDataSize(uint32_t _uncompressedDataSize) {
    return SetField<uint32_t>(VT_UNCOMPRESSEDDATASIZE, _uncompressedDataSize, 0);
  }
  const flatbuffers::Vector<uint8_t> *compressedData() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COMPRESSEDDATA);
  }
  flatbuffers::Vector<uint8_t> *mutable_compressedData() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_COMPRESSEDDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UNCOMPRESSEDDATASIZE) &&
           VerifyOffset(verifier, VT_COMPRESSEDDATA) &&
           verifier.VerifyVector(compressedData()) &&
           verifier.EndTable();
  }
};

struct CompressedBuilder {
  typedef Compressed Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uncompressedDataSize(uint32_t uncompressedDataSize) {
    fbb_.AddElement<uint32_t>(Compressed::VT_UNCOMPRESSEDDATASIZE, uncompressedDataSize, 0);
  }
  void add_compressedData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> compressedData) {
    fbb_.AddOffset(Compressed::VT_COMPRESSEDDATA, compressedData);
  }
  explicit CompressedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Compressed> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Compressed>(end);
    return o;
  }
};

inline flatbuffers::Offset<Compressed> CreateCompressed(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uncompressedDataSize = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> compressedData = 0) {
  CompressedBuilder builder_(_fbb);
  builder_.add_compressedData(compressedData);
  builder_.add_uncompressedDataSize(uncompressedDataSize);
  return builder_.Finish();
}

inline flatbuffers::Offset<Compressed> CreateCompressedDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uncompressedDataSize = 0,
    const std::vector<uint8_t> *compressedData = nullptr) {
  auto compressedData__ = compressedData ? _fbb.CreateVector<uint8_t>(*compressedData) : 0;
  return std_msgs::CreateCompressed(
      _fbb,
      uncompressedDataSize,
      compressedData__);
}

inline const std_msgs::Compressed *GetCompressed(const void *buf) {
  return flatbuffers::GetRoot<std_msgs::Compressed>(buf);
}

inline const std_msgs::Compressed *GetSizePrefixedCompressed(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<std_msgs::Compressed>(buf);
}

inline Compressed *GetMutableCompressed(void *buf) {
  return flatbuffers::GetMutableRoot<Compressed>(buf);
}

inline bool VerifyCompressedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<std_msgs::Compressed>(nullptr);
}

inline bool VerifySizePrefixedCompressedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<std_msgs::Compressed>(nullptr);
}

inline void FinishCompressedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<std_msgs::Compressed> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCompressedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<std_msgs::Compressed> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace std_msgs

#endif  // FLATBUFFERS_GENERATED_COMPRESSED_STD_MSGS_H_
