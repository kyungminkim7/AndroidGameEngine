// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JOYSTICK_MSGS_H_
#define FLATBUFFERS_GENERATED_JOYSTICK_MSGS_H_

#include "flatbuffers/flatbuffers.h"

namespace msgs {

struct Joystick;
struct JoystickBuilder;

struct Joystick FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef JoystickBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct JoystickBuilder {
  typedef Joystick Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Joystick::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Joystick::VT_Y, y, 0.0f);
  }
  explicit JoystickBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Joystick> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Joystick>(end);
    return o;
  }
};

inline flatbuffers::Offset<Joystick> CreateJoystick(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  JoystickBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const msgs::Joystick *GetJoystick(const void *buf) {
  return flatbuffers::GetRoot<msgs::Joystick>(buf);
}

inline const msgs::Joystick *GetSizePrefixedJoystick(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<msgs::Joystick>(buf);
}

inline bool VerifyJoystickBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<msgs::Joystick>(nullptr);
}

inline bool VerifySizePrefixedJoystickBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<msgs::Joystick>(nullptr);
}

inline void FinishJoystickBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<msgs::Joystick> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedJoystickBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<msgs::Joystick> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msgs

#endif  // FLATBUFFERS_GENERATED_JOYSTICK_MSGS_H_
